version: 2
jobs:
  build:
    docker:
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.12
      - image: circleci/postgres:9.6.2-alpine
        environment:
          POSTGRES_USER: shorturl
          POSTGRES_PASSWORD: password
          POSTGRES_DB: url_shortener
    environment:
      TEST_RESULTS: /tmp/test-results
      GO111MODULE: "on"
      
    working_directory: /go/src/github.com/w-k-s/short-url
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      # Restore cache
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      # Install dependencies
      - run: go get
      - run: go get github.com/jstemmer/go-junit-report
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          name: Install postgresql-client; Import dummy data; run an example query
          command: |
            sudo apt install -y postgresql-client || true
            PGPASSWORD=password psql -U shorturl -h 127.0.0.1 url_shortener < docker-config/data/schema.sql
            PGPASSWORD=password psql -U shorturl -h 127.0.0.1 url_shortener -c "select * from public.url_records"
      - run:
          name: Run unit tests
          environment:
            TEST_DB_CONN_STRING: "postgres://shorturl:password@localhost:5432/url_shortener?sslmode=disable"
          command: |
            trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
            make test | tee ${TEST_RESULTS}/go-test.out
      - run: CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app *.go
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Start short-url service
          environment:
            DB_CONN_STRING: "postgres://shorturl:password@localhost:5432/url_shortener?sslmode=disable"
          command: ./app
          background: true
      - run:
          name: Validate service is working
          command: |
            sleep 5
            curl --retry 10 --retry-delay 1 -X POST --header "Content-Type: application/json" -d '{"longUrl":"www.example.com"}' http://localhost:8080/urlshortener/v1/url
  
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results
  
  deploy:
    docker:
      - image: circleci/golang:1.12
    environment:
      GO111MODULE: "on"
    working_directory: /go/src/github.com/w-k-s/short-url
    steps:
      - checkout
      - run: go get
      - run:
          name: Build Executable
          command: CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app *.go
      - run:
          name: Secure copy app
          command: scp -o StrictHostKeyChecking=no app cicd@small.ml:~/
      - run:
          name: Secure copy nginx.conf
          command: scp -o StrictHostKeyChecking=no short-url.conf cicd@small.ml:/etc/nginx/conf.d
      - run:
          name: Restart application
          command: ssh -o StrictHostKeyChecking=no cicd@small.ml lsof -ti :8080 | xargs --no-run-if-empty kill -9; DB_CONN_STRING=$DB_CONN_STRING APP_BUILD=$CIRCLE_BUILD_NUM nohup ~/app &
          background: true
      - run:
          name: Restart nginx server
          command: ssh -o StrictHostKeyChecking=no cicd@small.ml "sudo systemctl restart nginx.service"
      - setup_remote_docker # https://circleci.com/docs/2.0/building-docker-images/
      - run:
          name: Login to docker hub
          command: docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - run:
          name: docker build image
          command: docker build -t "wkas/short-url:$CIRCLE_BUILD_NUM" -t "wkas/short-url:latest" .
      - run:
          name: docker push image
          command: docker push "wkas/short-url:$CIRCLE_BUILD_NUM"
workflows:
  version: 2
  deployment:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master