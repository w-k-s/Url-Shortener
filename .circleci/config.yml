version: 2
jobs:
  build_backend:
    docker:
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.12
      - image: circleci/postgres:9.6.2-alpine
        environment:
          POSTGRES_USER: shorturl
          POSTGRES_PASSWORD: password
          POSTGRES_DB: url_shortener
    environment:
      TEST_RESULTS: /tmp/test-results
      GO111MODULE: "on"

    working_directory: /go/src/github.com/w-k-s/short-url/backend
    steps:
      - checkout:
          path: /go/src/github.com/w-k-s/short-url
      - run: mkdir -p $TEST_RESULTS
      # Restore cache
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      # Install dependencies
      - run: go get
      - run: go get github.com/jstemmer/go-junit-report
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          name: Install postgresql-client; Import dummy data; run an example query
          command: |
            sudo apt-get update -y
            sudo apt install -y postgresql-client || true
            PGPASSWORD=password psql -U shorturl -h 127.0.0.1 url_shortener < ../docker-config/data/schema.sql
            PGPASSWORD=password psql -U shorturl -h 127.0.0.1 url_shortener -c "select * from public.url_records"
      - run:
          name: Run unit tests
          environment:
            TEST_DB_CONN_STRING: "postgres://shorturl:password@localhost:5432/url_shortener?sslmode=disable"
          command: |
            trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
            make test | tee ${TEST_RESULTS}/go-test.out
      - run: CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app *.go
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Start short-url service
          environment:
            BASE_URL: "http://smallest.ml"
            DB_CONN_STRING: "postgres://shorturl:password@localhost:5432/url_shortener?sslmode=disable"
            ADDRESS: ":8080"
          command: ./app
          background: true
      - run:
          name: Validate service is working
          command: |
            sleep 5
            curl --retry 10 --retry-delay 1 -X POST --header "Content-Type: application/json" -d '{"longUrl":"www.example.com"}' http://localhost:8080/urlshortener/v1/url

      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results

  deploy_backend:
    docker:
      - image: circleci/golang:1.12
    environment:
      GO111MODULE: "on"
    working_directory: /go/src/github.com/w-k-s/short-url/backend
    steps:
      - checkout:
          path: /go/src/github.com/w-k-s/short-url
      - setup_remote_docker # https://circleci.com/docs/2.0/building-docker-images/
      - run:
          name: docker build image
          command: |
            docker build -t "wkas/short-url:$CIRCLE_BUILD_NUM" \
            -t "wkas/short-url:latest" \
            -t "$AWS_DOCKER_REPO/wkas/short-url:$CIRCLE_BUILD_NUM" \
            -t "$AWS_DOCKER_REPO/wkas/short-url:latest" \
            .
      - run:
          name: Login to docker hub
          command: echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
      - run:
          name: docker push image
          command: |
            docker push "wkas/short-url:$CIRCLE_BUILD_NUM"
            docker push "wkas/short-url:latest"
      - run:
          name: aws push image
          command: |
            sudo apt-get update -y
            sudo apt-get -y -qq install awscli
            $(aws ecr get-login --no-include-email --region ap-south-1)
            docker push $AWS_DOCKER_REPO/wkas/short-url:latest
            docker push $AWS_DOCKER_REPO/wkas/short-url:$CIRCLE_BUILD_NUM
      - run:
          name: Create or update cloudformation stack
          command: |
            aws cloudformation deploy --template-file ../cloudformation/template.yml \
              --stack-name $STACK_NAME \
              --parameter-overrides \
                  VPC=$VPC_ID \
                  PublicSubnetA=$PUBLIC_SUBNET_A \
                  PublicSubnetB=$PUBLIC_SUBNET_B \
                  PrivateSubnetA=$PRIVATE_SUBNET_A \
                  PrivateSubnetB=$PRIVATE_SUBNET_B \
                  IamCertificateArn=$IAM_CERTIFICATE_ARN \
                  IamCertificateId=$IAM_CERTIFICATE_ID \
                  Image=$AWS_DOCKER_REPO/wkas/short-url:$CIRCLE_BUILD_NUM \
                  ServiceName=$SERVICE_NAME \
                  HealthCheckPath=$HEALTH_CHECK_PATH \
                  HostedZoneName=$HOSTED_ZONE_NAME \
                  DatabaseConnectionString=$DATABASE_CONNECTION_STRING \
                  ContainerSecurityGroup=$CONTAINER_SECURITY_GROUP \
                  LoadBalancerSecurityGroup=$LOAD_BALANCER_SECURITY_GROUP \
                  BaseUrl=$BASE_URL  \
              --capabilities CAPABILITY_NAMED_IAM \
              --region $AWS_REGION

  deploy_frontend:
    docker:
      - image: circleci/node:10.16.3
    working_directory: ~/project/frontend
    steps:
      - checkout:
          path: ~/project
      - run:
          name: update-npm
          command: "sudo npm install -g npm@latest"
      - restore_cache: # special step to restore the dependency cache
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Built in production mode
          command: |
            npm install
            npm run build-prod
      - run: # sync build dir with s3 bucket
          name: Sync with S3 bucket
          command: |
            sudo apt-get update -y
            sudo apt-get -y -qq install awscli
            aws s3 sync build s3://www.$HOSTED_ZONE_NAME --delete --region $AWS_REGION
      - setup_remote_docker # https://circleci.com/docs/2.0/building-docker-images/
      - run:
          name: Login to docker hub
          command: echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
      - run:
          name: docker build image
          command: docker build -t "wkas/short-url-frontend:$CIRCLE_BUILD_NUM" -t "wkas/short-url-frontend:latest" .
      - run:
          name: docker push image
          command: docker push "wkas/short-url-frontend:$CIRCLE_BUILD_NUM"
      - run:
          name: docker push image
          command: docker push "wkas/short-url-frontend:latest"

  delete_stack:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - run: # sync build dir with s3 bucket
          name: Delete CloudFormation stack
          command: |
            sudo apt-get update -y
            sudo apt-get -y -qq install awscli
            aws s3 rb s3://$SERVICE_NAME.cloudfront.accesslogs --force  --region $AWS_REGION
            aws s3 rb s3://www.$HOSTED_ZONE_NAME --force  --region $AWS_REGION
            aws cloudformation delete-stack --stack-name $STACK_NAME  --region $AWS_REGION

workflows:
  version: 2
  deployment:
    jobs:
      - build_backend
      - deploy_backend:
          requires:
            - build_backend
          filters:
            branches:
              only:
                - master
      - deploy_frontend:
          requires: # Deploy only when both services work
            - deploy_backend
          filters:
            branches:
              only:
                - master

  # scheduled_stack_creation:
  #   jobs:
  #     - build_backend
  #     - deploy_backend:
  #         requires:
  #           - build_backend
  #     - deploy_frontend:
  #         requires:
  #           - deploy_backend
  #   triggers:
  #     - schedule:
  #         cron: "0 14 * * 4,5,6"
  #         filters:
  #           branches:
  #             only:
  #               - master

  # scheduled_stack_deletion:
  #   jobs:
  #     - delete_stack
  #   triggers:
  #     - schedule:
  #         cron: "50 17 * * 4,5,6"
  #         filters:
  #           branches:
  #             only:
  #               - master
